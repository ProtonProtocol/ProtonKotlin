apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

android {
	compileSdkVersion 30
	buildToolsVersion "30.0.1"

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	kotlinOptions {
		jvmTarget = JavaVersion.VERSION_1_8.toString()
	}

	defaultConfig {
		minSdkVersion 21
		targetSdkVersion 30

		versionCode 13
		versionName "0.5.1"

		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
		consumerProguardFiles 'consumer-rules.pro'
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
		}
	}
}

dependencies {
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.72"

	// Unit Testing
	testImplementation "junit:junit:4.13"
	androidTestImplementation "androidx.test.ext:junit:1.1.1"
	androidTestImplementation "androidx.test.espresso:espresso-core:3.2.0"

	// KTX
	implementation "androidx.core:core-ktx:1.5.0-alpha01"

	// Lifecycle
	implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.0-alpha05"

	// Room
	def room_version = '2.2.5'
	implementation "androidx.room:room-ktx:$room_version"
	kapt "androidx.room:room-compiler:$room_version"

	// WorkManager
	implementation "androidx.work:work-runtime-ktx:2.3.4"

	// OkHttp
	def okhttp3_version = '4.8.0'
	implementation "com.squareup.okhttp3:okhttp:$okhttp3_version"
	implementation "com.squareup.okhttp3:logging-interceptor:$okhttp3_version"

	// Retrofit
	def retrofit_version = '2.9.0'
	implementation("com.squareup.retrofit2:retrofit:$retrofit_version") {
		exclude module: 'okhttp'
	}
	implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

	// Dagger
	def dagger_version = '2.28.1'
	implementation "com.google.dagger:dagger:$dagger_version"
	implementation "com.google.dagger:dagger-android-support:$dagger_version"
	kapt "com.google.dagger:dagger-android-processor:$dagger_version"
	kapt "com.google.dagger:dagger-compiler:$dagger_version"

	// Assisted Inject (Dagger)
	def assisted_inject_version = '0.5.2'
	compileOnly "com.squareup.inject:assisted-inject-annotations-dagger2:$assisted_inject_version"
	kapt "com.squareup.inject:assisted-inject-processor-dagger2:$assisted_inject_version"

	// Coroutines
	def coroutines_version = '1.3.4'
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

	// Timber
	implementation "com.jakewharton.timber:timber:4.7.1"

	// Gson
	implementation "com.google.code.gson:gson:2.8.6"

	// Guava
	implementation "com.google.guava:guava:29.0-jre"

	// Greymass ESR
	//implementation "com.greymass:esrsdk:1.0.1"
}

//dokkaHtml {
//	outputFormat = 'html'
//	outputDirectory = "$buildDir/dokka"
//	dokkaSourceSets {
//		main {
//			perPackageOption {
//				prefix = "com.metallicus.protonsdk.api"
//				suppress = true
//			}
//			perPackageOption {
//				prefix = "com.metallicus.protonsdk.db"
//				suppress = true
//			}
//			perPackageOption {
//				prefix = "com.metallicus.protonsdk.di"
//				suppress = true
//			}
//			perPackageOption {
//				prefix = "com.metallicus.protonsdk.repository"
//				suppress = true
//			}
//			perPackageOption {
//				prefix = "com.metallicus.protonsdk.worker"
//				suppress = true
//			}
//		}
//	}
//}

ext {
	bintrayRepo = "ProtonKotlin"
	bintrayName = "com.metallicus.protonsdk"
	userOrganization = "protonprotocol"

	libraryName = "protonsdk"

	publishedGroupId = "com.metallicus"
	artifact = "protonsdk"
	libraryVersion = android.defaultConfig.versionName

	libraryDescription = "Kotlin library for handling Proton Chain operations"
	siteUrl = "https://github.com/ProtonProtocol/ProtonKotlin"
	gitUrl = "https://github.com/ProtonProtocol/ProtonKotlin.git"
	developerId = "joey-harward"
	developerName = "Metallicus Inc."
	developerEmail = "joey@metalpay.co"
	licenseName = "MIT License"
	licenseUrl = "https://opensource.org/licenses/MIT"
	allLicenses = ["MIT"]
}

group = publishedGroupId
version = libraryVersion

task sourcesJar(type: Jar) {
	archiveClassifier.set('sources')
	from android.sourceSets.main.java.srcDirs
}

def pomConfig = {
	licenses {
		license {
			name licenseName
			url licenseUrl
		}
	}
	developers {
		developer {
			id developerId
			name developerName
			email developerEmail
		}
	}
	scm {
		connection gitUrl
		developerConnection gitUrl
		url siteUrl
	}
}

project.afterEvaluate {
	publishing {
		publications {
			ProtonSDKDebug(MavenPublication) {
				groupId = 'com.metallicus'
				artifactId = "${project.getName()}-debug"
				version = android.defaultConfig.versionName

				artifact bundleDebugAar

				pom.withXml {
					def root = asNode()
					root.appendNode('name', libraryName)
					root.appendNode('description', libraryDescription)
					root.appendNode('url', siteUrl)
					root.children().last() + pomConfig

					def dependenciesNode = root.appendNode('dependencies')
					configurations.implementation.allDependencies.each {
						if (it.group != null && it.name != null && it.version != null &&
							it.name != 'unspecified' && it.version != 'unspecified') {
							def dependencyNode = dependenciesNode.appendNode('dependency')
							dependencyNode.appendNode('groupId', it.group)
							dependencyNode.appendNode('artifactId', it.name)
							dependencyNode.appendNode('version', it.version)
						}
					}
				}
			}

			ProtonSDKRelease(MavenPublication) {
				groupId = 'com.metallicus'
				artifactId project.getName()
				version = android.defaultConfig.versionName

				artifact bundleReleaseAar
				artifact sourcesJar

				pom.withXml {
					def root = asNode()
					root.appendNode('name', libraryName)
					root.appendNode('description', libraryDescription)
					root.appendNode('url', siteUrl)
					root.children().last() + pomConfig

					def dependenciesNode = root.appendNode('dependencies')
					configurations.implementation.allDependencies.each {
						if (it.group != null && it.name != null && it.version != null &&
							it.name != 'unspecified' && it.version != 'unspecified') {
							def dependencyNode = dependenciesNode.appendNode('dependency')
							dependencyNode.appendNode('groupId', it.group)
							dependencyNode.appendNode('artifactId', it.name)
							dependencyNode.appendNode('version', it.version)
						}
					}
				}
			}
		}
	}
}

project.afterEvaluate {
	bintray {
		if (project.rootProject.file('local.properties').exists()) {
			Properties properties = new Properties()
			properties.load(project.rootProject.file('local.properties').newDataInputStream())

			user = properties.getProperty("bintray.user")
			key = properties.getProperty("bintray.apikey")

			publications = ['ProtonSDKRelease']

			pkg {
				repo = bintrayRepo
				name = bintrayName
				userOrg = userOrganization
				desc = libraryDescription
				websiteUrl = siteUrl
				vcsUrl = gitUrl
				licenses = allLicenses
				publish = true
				publicDownloadNumbers = true
				version {
					name = libraryVersion
					desc = libraryDescription
					released = new Date()

//					gpg {
//						sign = true //Determines whether to GPG sign the files. The default is false
//						passphrase = properties.getProperty("bintray.gpg.password")
//						//Optional. The passphrase for GPG signing'
//					}
				}
			}
		}
	}
}
